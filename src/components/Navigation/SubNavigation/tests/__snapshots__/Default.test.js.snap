// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<withRouter(SubNavigation) /> rendered correctly with Default fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <Heading
            className="heading"
            h1={true}
            h2={false}
            h3={false}
            h4={false}
            nav={false}
          >
            <h1
              className="heading h1 heading"
            >
              Parent title
            </h1>
          </Heading>
          <div
            className="controls"
          >
            <span
              className="control"
            >
              <SingleSelect
                className="locationSelector"
                disabled={false}
                error=""
                id="locationSelector"
                inline={false}
                name="location"
                onBeforeOpen={[Function]}
                onChange={[Function]}
                onClose={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Location A",
                      "value": "Location A",
                    },
                    Object {
                      "label": "Location B",
                      "value": "Location B",
                    },
                  ]
                }
                style={
                  Object {
                    "paddingBottom": "0px",
                  }
                }
                value={null}
              >
                <div
                  className="locationSelector"
                  onBeforeOpen={[Function]}
                  onClose={[Function]}
                  style={
                    Object {
                      "paddingBottom": "0px",
                    }
                  }
                >
                  <Select
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    className="select"
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={true}
                    closeOnSelect={true}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={Object {}}
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="No results found"
                    onBlurResetsInput={true}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    onSelectResetsInput={true}
                    openOnClick={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Location A",
                          "value": "Location A",
                        },
                        Object {
                          "label": "Location B",
                          "value": "Location B",
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    removeSelected={true}
                    required={false}
                    rtl={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    simpleValue={false}
                    tabSelectsValue={true}
                    trimFilter={true}
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select select is-clearable is-searchable Select--single"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-2--value"
                        >
                          <div
                            className="Select-placeholder"
                          >
                            Select...
                          </div>
                          <AutosizeInput
                            aria-activedescendant="react-select-2--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            className="Select-input"
                            injectStyles={true}
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <input
                                aria-activedescendant="react-select-2--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </AutosizeInput>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </SingleSelect>
            </span>
            <span
              className="control"
            >
              <NavLink
                activeClassName="active"
                ariaCurrent="true"
                className="navLink"
                key="logout"
                target="_self"
                title="Logout"
                to="/logout"
              >
                <Route
                  path="/logout"
                >
                  <Link
                    aria-current={false}
                    className="navLink"
                    replace={false}
                    target="_self"
                    title="Logout"
                    to="/logout"
                  >
                    <a
                      aria-current={false}
                      className="navLink"
                      href="/logout"
                      onClick={[Function]}
                      target="_self"
                      title="Logout"
                    >
                      <Icon
                        className="icon"
                        name="Logout"
                      >
                        <Logout
                          className="icon icon"
                        >
                          <svg
                            className="icon icon"
                            version="1.1"
                            viewBox="0 1 16 16"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M 7.5 0.66601562 C 6.6774686 0.66601562 6 1.3434842 6 2.1660156 L 6 5.1660156 L 7 5.1660156 L 7 2.1660156 C 7 1.884547 7.2185314 1.6660156 7.5 1.6660156 L 14.5 1.6660156 C 14.781469 1.6660156 15 1.884547 15 2.1660156 L 15 14.166016 C 15 14.447484 14.781469 14.666016 14.5 14.666016 L 7.5 14.666016 C 7.2185314 14.666016 7 14.447484 7 14.166016 L 7 11.166016 L 6 11.166016 L 6 14.166016 C 6 14.988547 6.6774686 15.666016 7.5 15.666016 L 14.5 15.666016 C 15.322531 15.666016 16 14.988547 16 14.166016 L 16 2.1660156 C 16 1.3434842 15.322531 0.66601562 14.5 0.66601562 L 7.5 0.66601562 z M 3.1464844 4.8125 L -0.20703125 8.1660156 L 3.1464844 11.519531 L 3.8535156 10.8125 L 1.7070312 8.6660156 L 11.5 8.6660156 L 11.5 7.6660156 L 1.7070312 7.6660156 L 3.8535156 5.5195312 L 3.1464844 4.8125 z "
                              transform="translate(0,1)"
                            />
                          </svg>
                        </Logout>
                      </Icon>
                      Logout
                    </a>
                  </Link>
                </Route>
              </NavLink>
            </span>
          </div>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="0"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="1"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;
